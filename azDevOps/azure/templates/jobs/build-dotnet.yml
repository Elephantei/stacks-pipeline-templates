parameters:
  devops_artefact_name: 'DevOps'
  dependsOn: 'GetPackage'
  # Docker Config
  docker_workdir: ''
  docker_imagename: ''
  docker_imagetag: ''
  docker_containerregistryname: ''
  # Vulnerability Scanning
  vulnerability_scan: false
  vulnerability_workdir: ''
  #  Testing
  unit_test: false
  unit_test_project: ''
  component_test: false
  component_test_project: ''
  integration_test: false
  integration_test_project: ''
  integration_test_cosmosdb_secret: false
  integration_test_cosmosdb_account: ''
  integration_test_cosmosdb_database: ''
  contract_test: false
  contract_test_project: ''
  functional_test: false
  functional_test_path: ''
  functional_test_artefact: ''
  build_file: false
  build_file_path: ''
  build_file_artefact: ''
  # Release notes
  releasenote: false
  releasenote_artefact: ''
  releasenote_version: ''
  releasenote_user: ''
  releasenote_token: ''
  releasenote_github_org: ''
  releasenote_github_project: ''
  releasenote_output: ''
  releasenote_failonmissingPR: ''
  
  
jobs:
- job: BuildDotNet
  dependsOn: ${{ parameters.dependsOn }}
  pool:
    vmImage: 'ubuntu-latest'
  continueOnError: false
  steps:
# Get DevOps Artefact and Install Prerequisites  
  - template: ../steps/build-consume-devops.yml

# Login to Azure/AKS
  - template: ../steps/login-services.yml
    parameters:   
      # Azure
      login_azure: true
      azure_tenant_id: '$(azure_tenant_id)'
      azure_subscription_id: '$(azure_subscription_id)'
      azure_client_id: '$(azure_client_id)'
      azure_client_secret: '$(azure_client_secret)'
      # Kubernetes
      login_kubernetes: false
        # aks_rg: ''
        # aks_clustername: '' 
      devops_artefact_name: '${{ parameters.devops_artefact_name }}'

# Unit Test
  - ${{ if eq(parameters.unit_test, true) }}:
    - task: DotNetCoreCLI@2
      displayName: 'Test: Unit tests'
      inputs:
        command: test
        projects: '${{ parameters.unit_test_project }}'
        arguments: '-v n '
        testRunTitle: 'Test: Unit tests'

# Component Test
  - ${{ if eq(parameters.component_test, true) }}:
    - task: DotNetCoreCLI@2
      displayName: 'Test: Component tests'
      inputs:
        command: test
        projects: '${{ parameters.component_test_project }}'
        arguments: '-v n '
        testRunTitle: 'Test: Component tests'

# Integration Test
  - ${{ if eq(parameters.integration_test_cosmosdb_secret, true) }}:
    - task: Bash@3
      displayName: 'Get: CosmosDB Account Key for Integration Tests'
      inputs:
        targetType: 'filePath'
        filePath: $(Pipeline.Workspace)/${{ parameters.devops_artefact_name }}/Azure/get-cosmosdb-key-endpoint.sh
        arguments: ${{ parameters.integration_test_cosmosdb_account }}

    - bash: |
        echo Setting CosmosDB Database Name to ${{ parameters.integration_test_cosmosdb_database }}
        echo "##vso[task.setvariable variable=CosmosDB__DatabaseName]${{ parameters.integration_test_cosmosdb_database }}"
        echo Setting CosmosDB Account URI to https://${{ parameters.integration_test_cosmosdb_account }}.documents.azure.com:443/
        echo "##vso[task.setvariable variable=CosmosDB__DatabaseAccountUri]https://${{ parameters.integration_test_cosmosdb_account }}.documents.azure.com:443/"
      displayName: 'Mutate: Set CosmosDB Database Account for Integration Tests'

  - ${{ if eq(parameters.integration_test, true) }}:
    - task: DotNetCoreCLI@2
      displayName: 'Test: Integration tests'
      inputs:
        command: test
        projects: '${{ parameters.integration_test_project }}'
        arguments: '-v n '
        testRunTitle: 'Test: Integration tests'

# Contract tests
  - ${{ if eq(parameters.contract_test, true) }}:
    - task: DotNetCoreCLI@2
      displayName: 'Test: Provider Contracts'
      inputs:
        command: test
        projects: '${{ parameters.contract_test_project }}'
        arguments: '-v n'
        testRunTitle: 'Test: Provider Contracts'


# Build Docker Image, Scan and Push to Repository
  - template: ../steps/build-docker-build-and-scan.yml
    parameters:
      devops_artefact_name: '{{ parameters.devops_artefact_name }}'  
      # Docker
      docker_workdir: '${{ parameters.docker_workdir }}'
      docker_imagename: '${{ parameters.docker_imagename }}'
      docker_imagetag: '${{ parameters.docker_imagetag }}' 
      docker_containerregistryname: '${{ parameters.docker_containerregistryname }}'
      # Vulnerability Scanning
      vulnerability_scan: '${{ parameters.vulnerability_scan }}'
      vulnerability_workdir: '${{ parameters.vulnerability_workdir }}'

# Create a ReleaseNote artefact for publication if deployment to Production is successful
  - ${{ if eq(parameters.releasenote, true) }}:
    - task: Bash@3
      displayName: 'Create Release Notes'
      inputs:
        targetType: 'filePath'
        filePath: $(Pipeline.Workspace)/{{ parameters.devops_artefact_name }}/ReleaseNotes/create-releasenotes-from-github-pr.sh
        # Version, GitHub Username, GitHub Token, Company, Project, Output, FailOnMissingPR
        arguments: ${{ parameters.releasenote_version }} ${{ parameters.releasenote_user }} ${{ parameters.releasenote_token }} ${{ parameters.releasenote_github_org }} ${{ parameters.releasenote_github_project }} ${{ parameters.releasenote_output }} ${{ parameters.releasenote_failonmissingPR }}

    - task: PublishBuildArtifacts@1
      displayName: 'Publish: Release Notes Artefact'
      inputs:
        PathtoPublish: '$(Build.ArtifactStagingDirectory)'
        ArtifactName: '${{ parameters.releasenote_artefact }}'

  - ${{ if eq(parameters.functional_test, true) }}:
    - task: PublishBuildArtifacts@1
      displayName: 'Publish: Functional Tests Artifact'
      inputs:
        PathtoPublish: '${{ parameters.functional_test_path }}'  
        ArtifactName: '${{ parameters.functional_test_artefact }}'

  - ${{ if eq(parameters.build_file, true) }}:
    - task: PublishBuildArtifacts@1
      displayName: 'Publish: Build Artefacts'
      inputs:
        PathtoPublish: '${{ parameters.build_file_path }}'  
        ArtifactName: '${{ parameters.build_file_artefact }}'